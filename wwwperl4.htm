<html>
<head>
<meta http-equiv="Content-type" content="text/html; charset=Shift_JIS">
<title>とほほのperl入門（まめ知識）</title>
<link rel="stylesheet" href="style.css">
</head>
<body>
<!-- テキスト広告(FE) -->
<div style="border:1px solid #9999cc; width:468px; background-color:#eeeeff; padding:3px; margin-top:3px; color:#000080; text-align:left; font-size:9pt;">
[広告]
<a href="http://www.npb-net.com/">ドコモショップ</a> /
<a href="http://www.k-dentalclinic.jp/">裏側矯正</a> /
<a href="http://www.gapcentral.gapbuster.com/ja-jp/index.asp">覆面調査</a> /
<a href="http://review-info.info/">情報商材 暴露</a> /
<a href="http://sakura-buzz.com/">悪徳出会い</a>
</div>
<h2><img src="image/popase.gif" height=19 width=18 alt="">とほほのperl入門（まめ知識）</h2>
<a href="www.htm">トップ</a> &gt;
<a href="wwwperl.htm">とほほのperl入門</a> &gt;
まめ知識

<h4>■ <a name="strict">エラーチェックを行うには</a></h4>
<div class=i>
<p>Perlはデフォルトでは非常に寛大であり、あなたの意図した通りにプログラムを書いていない場合でも動作することがあります。それは意図通りに動いていないので問題があると言えます。その問題を自分の目で追うのは大変な作業です。strictプラグマ, warningsプラグマを使うことであなたに代わって Perlがエラーを見つけてくれます。使い方は簡単です。プログラムの冒頭に use strict; use warnings;を追加するだけです。</p>
<pre class=c>
#!/usr/bin/env perl
use strict;
use warnings;
</pre>
<p>詳しい説明は以下の参考サイトにありますので、詳しく知りたい場合はそちらを参照して下さい</p>
<ul>
  <li><a href="http://blog.livedoor.jp/dankogai/archives/50502585.html">strictプラグマの解説</a></li>
  <li><a href="blog.livedoor.jp/dankogai/archives/j51068305.html">warningsプラグマの解説</a></li>
</ul>
</div>

<h4>■ <a name="Japanese">perlで日本語を扱うには</a></h4>
<div class=i>
<p>Perlで日本語を扱う場合は Encodeモジュールを利用します。入口で decodeし, 出口 encodeするということが基本です。</p>
<pre class=c>
use Encode;
my $xx = decode('utf-8', "漢字"); # 第一引数に第二引数の文字コードを指定します.(shift_jis, euc-jp, utf-8等)
# $xxに対する処理. decodeしたことにより, asciiと同じ間隔で length関数等が利用できます.
print encode('shift_jis', $xx);  # 第一引数に変換する文字コードを指定します.
</pre>
<p>すべて UTF-8で扱う場合は以下のように書けます</p>
<pre class=c>
use utf8;
binmode STDOUT, ":utf8";
my $xx = "漢字"; 'use utf8;'により, utf-8として扱われる
print $xx;  # 'binmode...'により, STDOUT出力する文字は utf-8で encodeされる.
</pre>
</div>

<h4>■ <a name="Timezone">時間が9時間ずれる場合</a></h4>
<div class=i>
<p>海外のサーバーを利用している時など、perlが処理している時刻が9時間ずれてしまうことがあります。その時は、$ENV{'TZ'} = "JST-9"; のように、タイムゾーンを設定してやることで、回避できることがあります。</p>
</div>

<h4>■ <a name="eval">サポートされていないかもしれない関数</a></h4>
<div class=i>
<p>flock()などの関数はOSによってサポートされていたりいなかったりします。サポートされていない関数を呼び出すと、通常その場でプログラムが終了してしまいますが、evalを用いることで回避することができます。詳しくは <a href="wwwperl2.htm#eval">eval</a> を参照してください。</p>
</div>

<h4>■ <a name="Flock">flock()の間違った使い方</a></h4>
<div class=i>
<p>flock()を用いてファイルをロックする場合、よく次のようなコーディングをしていまいますが、これは2つの誤りを含んでいます。詳しくは <a href="wwwperl2.htm#flock">flock()</a>を参照してください。</p>
<pre class=c>
open my $fh, '&gt;', "datafile.txt" or die "Can't open datafile.txt";
flock $fh, 2;
print $fh "....";
flock $fh, 8;
close $fh;
</pre>
</div>

<h4>■ <a name="Http">簡単なHTTPクライアントを実現するには？</a></h4>
<div class=i>
<p>→ <a href="wwwperl2.htm#socket">socket()</a></p>
Perl 5.14以降では HTTP::Tinyモジュールが標準モジュールになっています. このモジュールを使うとより簡単に書けます. Perlのバージョンは 'perl -v'で確認することができます.
<pre class=c>
#!/usr/bin/env perl
use strict;
use warnings;

use HTTP::Tiny;

my $response = HTTP::Tiny-&gt;new-&gt;get('http://example.com/');
die "Failed!\n" unless $response-&gt;{success};

print $response-&gt;{content}; # 取得した内容を表示
</pre>
</div>

<h4>■ <a name="Gethost">IPアドレスをホスト名に変換するには？</a></h4>
<div class=i>
<p>→ <a href="wwwperl2.htm#gethostbyaddr">gethostbyaddr()</a></p>
</div>

<hr>
<div>Copyright (C) 1997-2002 杜甫々</div>
<div>初版：1997年2月3日、最終更新：2002年2月24日</div>
<div>http://www.tohoho-web.com/wwwperl4.htm</div>
</body>
</html>
